<?php

require_once './lib/all.php';
$shuffled = Array_::from([Integer_::from(1), Integer_::from(2)])->shuffle();
$random = Array_::from([Integer_::from(1), Integer_::from(2)])->random();
$_dollar_arrayTests = Array_::from([Array_::from([Integer_::from(1), Integer_::from(2), Integer_::from(3)])->infix_equal(Array_::from([Integer_::from(3), Integer_::from(2), Integer_::from(1)]))->prefix_exclamation(), Array_::from([Integer_::from(1), Integer_::from(2), Integer_::from(3)])->infix_equal(Array_::from([Integer_::from(1), Integer_::from(2), Integer_::from(3)])), Array_::from([], Integer_::from(1), Integer_::from(5))->infix_equal(Array_::from([Integer_::from(1), Integer_::from(2), Integer_::from(3), Integer_::from(4), Integer_::from(5)])), Array_::from([], Integer_::from(5), Integer_::from(1))->infix_equal(Array_::from([Integer_::from(5), Integer_::from(4), Integer_::from(3), Integer_::from(2), Integer_::from(1)])), Array_::from([], Integer_::from(1), 'inf')->infix_equal(Array_::from([], Integer_::from(1), 'inf')), Array_::from([Integer_::from(1), Integer_::from(2), Integer_::from(3)])->infix_exclamation_equal(Array_::from([Integer_::from(0), Integer_::from(2), Integer_::from(3)])), Array_::from([Integer_::from(1), Integer_::from(2), Integer_::from(3)])->infix_ampersand(Array_::from([Integer_::from(3), Integer_::from(4), Integer_::from(5)]))->infix_equal(Array_::from([Integer_::from(1), Integer_::from(2), Integer_::from(3), Integer_::from(3), Integer_::from(4), Integer_::from(5)])), Array_::from([Integer_::from(1), Integer_::from(2), Integer_::from(3)])->infix_union(Array_::from([Integer_::from(3), Integer_::from(4)]))->infix_equal(Array_::from([Integer_::from(1), Integer_::from(2), Integer_::from(3), Integer_::from(4)])), Array_::from([Integer_::from(1), Integer_::from(2), Integer_::from(3)])->infix_intersection(Array_::from([Integer_::from(2), Integer_::from(3), Integer_::from(3), Integer_::from(4)]))->infix_equal(Array_::from([Integer_::from(2), Integer_::from(3)])), Array_::from([Integer_::from(1), Integer_::from(1), Integer_::from(2), Integer_::from(3)])->infix_difference(Array_::from([Integer_::from(2), Integer_::from(3), Integer_::from(3), Integer_::from(4)]))->infix_equal(Array_::from([Integer_::from(1)])), Array_::from([Integer_::from(1), Integer_::from(2), Integer_::from(3)])->postfix_plus()->infix_equal(Integer_::from(6)), Array_::from([Integer_::from(10), Integer_::from(2), Integer_::from(3)])->postfix_minus()->infix_equal(Integer_::from(5)), Array_::from([Integer_::from(1), Integer_::from(2), Integer_::from(3), Integer_::from(4)])->postfix_asterisk()->infix_equal(Integer_::from(24)), Array_::from([Integer_::from(5), Integer_::from(2)])->postfix_slash()->infix_equal(Decimal_::from(2.5)), Array_::from([String_::from('foo'), String_::from('bar'), String_::from('baz')])->postfix_ampersand()->infix_equal(String_::from('foobarbaz')), Array_::from([Boolean_::from(true), Boolean_::from(false), Boolean_::from(true)])->postfix_and()->infix_equal(Boolean_::from(false)), Array_::from([Boolean_::from(true), Boolean_::from(false), Boolean_::from(true)])->postfix_or()->infix_equal(Boolean_::from(true)), Array_::from([Integer_::from(1), Integer_::from(2), Integer_::from(3), Integer_::from(3), Integer_::from(4)])->size()->infix_equal(Integer_::from(5)), Array_::from([Integer_::from(1), Integer_::from(2), Integer_::from(3), Integer_::from(3), Integer_::from(4)])->unique()->infix_equal(Array_::from([Integer_::from(1), Integer_::from(2), Integer_::from(3), Integer_::from(4)])), Array_::from([Integer_::from(1), (function () use(&$shuffled, &$random, &$_dollar_arrayTests) {
    if (Boolean_::from(false)->toNative()) {
        return Integer_::from(1);
    } else {
        return Integer_::from(3);
    }
})()])->contains(Integer_::from(3)), Array_::from([Integer_::from(1), Integer_::from(2), Integer_::from(3), Integer_::from(4), Integer_::from(5)])->chunk(Integer_::from(2))->infix_equal(Array_::from([Array_::from([Integer_::from(1), Integer_::from(2)]), Array_::from([Integer_::from(3), Integer_::from(4)]), Array_::from([Integer_::from(5)])])), Array_::from([Integer_::from(1), Integer_::from(2), Integer_::from(2)])->indexOf(Integer_::from(2))->infix_equal(Integer_::from(2)), $shuffled->infix_equal(Array_::from([Integer_::from(1), Integer_::from(2)]))->infix_or($shuffled->infix_equal(Array_::from([Integer_::from(2), Integer_::from(1)]))), $random->infix_equal(Integer_::from(1))->infix_or($random->infix_equal(Integer_::from(2)))]);
foreach ($_dollar_arrayTests as $_dollar_test) {
    if ($_dollar_test->infix_equal(Boolean_::from(true))->toNative()) {
        Say_(String_::from('.')->green());
    } else {
        Say_(String_::from('x')->red());
    }
}